/* Window Restore FFI Bindings */

#ifndef WINDOW_RESTORE_H
#define WINDOW_RESTORE_H

#pragma once

/* Generated with cbindgen:0.26.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#define ERROR_APP_NOT_FOUND 2

#define ERROR_DISPLAY_NOT_FOUND 4

#define ERROR_FILE_IO 5

#define ERROR_JSON 6

#define ERROR_PERMISSION_DENIED 1

/**
 * FFI用エラーコード
 * Swiftから呼び出した結果を判定するために使用
 */
#define ERROR_SUCCESS 0

#define ERROR_UNKNOWN 99

#define ERROR_WINDOW_NOT_FOUND 3

extern uint8_t AXIsProcessTrusted(void);

/**
 * アクセシビリティ権限をチェック
 * macOSのアクセシビリティ権限が付与されているか確認する
 * 戻り値: 0=権限あり、1=権限なし、99=エラー
 */
int32_t check_permissions(void);

/**
 * ライブラリのクリーンアップ
 * アプリケーション終了時に呼び出す
 */
int32_t cleanup_library(void);

/**
 * レイアウトを削除
 * 指定された名前のレイアウトファイルを削除する
 * 引数: name - レイアウト名（C文字列）
 * 戻り値: エラーコード（0=成功、その他=エラー）
 */
int32_t delete_layout(const char *name);

/**
 * get_layout_listで割り当てられたメモリを解放
 * Swiftで文字列を使い終わった後に必ず呼び出すこと
 * 引数: s - 解放する文字列のポインタ
 */
void free_string(char *s);

/**
 * 直近のエラーメッセージを取得
 * 戻り値: C文字列ポインタ（使用後はfree_stringで解放）
 */
char *get_last_error_message(void);

/**
 * 保存されたレイアウトのリストを取得
 * JSON配列形式の文字列を返す（例: ["Layout1", "Layout2"]）
 * 戻り値: JSON文字列のポインタ（使用後はfree_string()で解放すること）
 */
char *get_layout_list(void);

/**
 * ライブラリを初期化
 * アプリケーション起動時に一度だけ呼び出す
 * ロギングシステムなどの初期化を行う
 */
int32_t init_library(void);

/**
 * ウィンドウレイアウトを復元
 * 指定された名前のレイアウトをロードして適用する
 * 引数: name - レイアウト名（C文字列）
 * 戻り値: エラーコード（0=成功、その他=エラー）
 */
int32_t restore_layout(const char *name);

/**
 * 現在のウィンドウレイアウトを保存
 * Swift/Objective-Cから呼び出し可能なC互換関数
 * 引数: name - レイアウト名（C文字列）
 * 戻り値: エラーコード（0=成功、その他=エラー）
 */
int32_t save_current_layout(const char *name);

#endif /* WINDOW_RESTORE_H */
